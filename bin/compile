#!/usr/bin/env bash

# set -e            # fail fast
# set -o pipefail   # don't ignore exit codes when piping output
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3

bp_dir=$(cd $(dirname $0); cd ..; pwd)

source $bp_dir/bin/common.sh

export LDFLAGS=-L$build_dir/vendor/lib
export LD_LIBRARY_PATH=$build_dir/vendor/lib


download () {
  if [ -e $cache_dir/zbarimg ]; then
    mkdir -p $build_dir/vendor/bin
    cp -r $cache_dir/zbarimg $build_dir/vendor/bin/zbarimg
    exit 0
  else
    status "Downloading and installing ZBAR"
    zbar_url="http://iweb.dl.sourceforge.net/project/zbar/zbar/0.10/zbar-0.10.tar.bz2"
    curl $zbar_url -s -o - | tar jxf - -C $build_dir
  fi
}

patch_zbar () {
  status "Patching JPEG support for ZBAR"
  cd $build_dir/vendor/zbar
  cat <<'EOF' >> zbar-jpeg-fix.patch
--- a/zbar/jpeg.c
+++ b/zbar/jpeg.c
@@ -79,8 +79,15 @@
 void skip_input_data (j_decompress_ptr cinfo,
                       long num_bytes)
 {
-    cinfo->src->next_input_byte = NULL;
-    cinfo->src->bytes_in_buffer = 0;
+    if(num_bytes > 0) {
+        if (num_bytes < cinfo->src->bytes_in_buffer) {
+            cinfo->src->next_input_byte += num_bytes;
+            cinfo->src->bytes_in_buffer -= num_bytes;
+        }
+        else {
+            fill_input_buffer(cinfo);
+        }
+    }
 }
 
 void term_source (j_decompress_ptr cinfo)
EOF

  patch -f -b -p1 -izbar-jpeg-fix.patch
}

install () {
	if [ -e $build_dir/vendor/bin/zbarimg ]; then
		exit 0
    else
  	  download
  	  mkdir -p $build_dir/vendor/bin
  	  mkdir -p $build_dir/vendor/lib
	  mv $build_dir/zbar-0.10 $build_dir/vendor/zbar
    patch_zbar
	  cd $build_dir/vendor/zbar
      status "Configuring ZBAR"
	  CFLAGS="" LDFLAGS=-s ./configure --disable-video --without-gtk --without-qt --prefix=$build_dir/vendor
	  status "Make!"
	  make
	  status "Make install !!!"
	  make install
    echo "export PATH=\"\$HOME/vendor/bin:\$HOME/bin:\$HOME/node_modules/.bin:\$PATH\";" > $build_dir/.profile.d/zbar.sh


	fi
}


install


rm -rf $cache_dir/zbarimg # (for apps still on the older caching strategy)



status "Writing profile script"
mkdir -p $build_dir/.profile.d
cat <<EOF >$build_dir/.profile.d/000_zbar.sh
export PATH="\$HOME/vendor/bin$PATH"
export LD_LIBRARY_PATH="\$HOME/vendor/lib:\$LD_LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/vendor/include:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
EOF

exit 0
